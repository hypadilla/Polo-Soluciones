package vista;

import controlador.ControladorCategoria;
import controlador.ControladorDepartamentos;
import controlador.ControladorProductos;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import modelo.Entidades.Categorias;
import modelo.Entidades.Departamentos;
import modelo.Entidades.Productos;
import vista.Consulta.ConsultarProductos;
import static vista.frmInicio.jdpEscritorio;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author hypadilla
 */
public class IntProductos extends javax.swing.JInternalFrame {
        int id;
        public static DecimalFormat formato = new DecimalFormat("#.000");
        ArrayList<Departamentos> departamentos;
        ArrayList<Categorias> categorias;
        Double valorNetoCompra=100.0;
        Double porcIvaCompra=19.0;
        Double valorPorcIvaCompra=valorNetoCompra*(porcIvaCompra/100);
        Double valorTotalCompra = valorNetoCompra*(1+(porcIvaCompra/100));
        Double valorNetoVenta=200.0;
        Double porcIvaVenta=19.0;
        Double valorPorcIvaVenta=valorNetoVenta*(porcIvaVenta/100);
        Double valorTotalVenta = valorNetoVenta*(1+(porcIvaVenta/100));
        Double valorUtilidad = valorTotalVenta - valorTotalCompra;
        Double porcUtilidad = 0.0;//(valorUtilidad*100)/valorTotalCompra;
    /**
     * Creates new form IntProductos
     */
    public IntProductos() {        
        initComponents();
        departamentos = new ArrayList<>();
        categorias = new ArrayList<>();        
        ListaDepartamentos();
        ListaCategorias();
        id = 0;
        txtVrNetoCompra.setText(""+valorNetoCompra);
        txtVrNetoVenta.setText(""+valorNetoVenta);
        txtPorcIvaCompra.setText(""+porcIvaCompra);
        txtPorcIvaVenta.setText(""+porcIvaVenta);
        lblCostoIva.setText(""+valorPorcIvaCompra);
        lblIvaVenta.setText(""+valorPorcIvaVenta);
        txtCostoTotalCosto.setText(""+valorTotalCompra);
        txtCostoTotalVenta.setText(""+valorTotalVenta);
        txtVrUtilidad.setText(""+(valorUtilidad));
        txtPorcUtilidad.setText(""+porcUtilidad);
    }

    public IntProductos(int id) {
           initComponents();
           departamentos = new ArrayList<>();
           categorias = new ArrayList<>();
           ListaDepartamentos();
           ListaCategorias();
           this.id = id;        
           txtCodigo.setEnabled(false);
           ArrayList<String> Filtro = new ArrayList();
           Filtro.add("IdProductos");
           Filtro.add(String.valueOf(id));
           Filtro.add("Int");
           ControladorProductos controladorProductos = new ControladorProductos();
           Productos productos = new Productos();
           productos = (Productos) controladorProductos.Mostrar(Filtro);
           txtCodigo.setText(productos.getCodigo());
           txtReferencia.setText(productos.getReferencia());
           txtDescripcion.setText(productos.getDescripcion());
           lblRutaImagen.setText(productos.getRutaImagen());
           txtVrNetoCompra.setText(""+productos.getCostoNeto());
           txtVrNetoVenta.setText(""+productos.getVentaNeto());
           txtPorcIvaCompra.setText(""+productos.getCostoIva());
           txtPorcIvaVenta.setText(""+productos.getVentaIva());
           lblCostoIva.setText(""+productos.getCostoNeto()*(productos.getCostoIva()/100));
           lblIvaVenta.setText(""+productos.getVentaNeto()*(productos.getVentaIva()/100));
           txtCostoTotalCosto.setText(""+(productos.getCostoNeto()*(1+(productos.getCostoIva()/100))));
           txtCostoTotalVenta.setText(""+(productos.getVentaNeto()*(1+(productos.getVentaIva()/100))));
           txtVrUtilidad.setText(""+productos.getVentaUtilidad());
           txtPorcUtilidad.setText(""+(productos.getVentaUtilidad()*100)/((productos.getCostoNeto()*(1+productos.getCostoIva()/100))));

           this.setTitle("ACTUALIZANDO PRODUCTO");
           btnGuardar.setText("ACTUALIZAR");
           btnLimpiar.setText("NUEVO");
       }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void Limpiar() {
        this.setTitle("NUEVO PRODUCTO");
        txtCodigo.setEnabled(true);
        txtCodigo.setText("");
        txtReferencia.setText("");
        txtDescripcion.setText("");
        cbDepartamento.setSelectedIndex(0);
        cbCategoria.setSelectedIndex(0);
        
        
        
        
        
        
        txtVrNetoCompra.setText("");
        txtPorcIvaCompra.setText("19.0");
        txtCostoTotalCosto.setText("119.0");
        txtVrNetoVenta.setText("0.0");
        txtPorcIvaVenta.setText("19.0");
        txtCostoTotalVenta.setText("0.0");
        txtPorcUtilidad.setText("-100.0");
        txtVrUtilidad.setText("-100.0");
        btnLimpiar.setText("LIMPIAR");
        id=0;
    }

    
    private boolean validarTxtNumerico(JTextField textField){
        try{ 
            if(Double.parseDouble(textField.getText()) >=(0.0) || (Double.parseDouble(textField.getText()) <=(0.0))){
                return true;
            }else{            
                return false;
            }   
        }catch(Exception e){
            textField.requestFocus();
            return false;
        }
    }
    
    
    private boolean validarTxtMayorIgualQueCero(JTextField textField){    
        try{ 
            if(Double.parseDouble(textField.getText()) >=(0.0)){
                return true;
            }else{            
                return false;
            }   
        }catch(Exception e){
            textField.requestFocus();
            return false;
        }
    }
    
    private boolean validarTxtMayorIgualQueCeroMenorIgualQueCien(JTextField textField){    
        try{ 
            if(Double.parseDouble(textField.getText()) >=(0.0) && Double.parseDouble(textField.getText()) <=(100.0)){
                return true;
            }else{            
                return false;
            }   
        }catch(Exception e){
            textField.requestFocus();
            return false;
        }
    }
    
    private boolean validarTxtMayorIgualQueMenosCien(JTextField textField){    
        try{ 
            if(Double.parseDouble(textField.getText()) >=(-100.0) ){
                return true;
            }else{            
                return false;
            }   
        }catch(Exception e){
            textField.requestFocus();
            return false;
        }
    }
    
    private boolean validarTxtPorcIva(JTextField textField){
        if (validarTxtNumerico(textField)){
            if(validarTxtMayorIgualQueCeroMenorIgualQueCien(textField) ){
                return true;
            }else{            
                //txtPorcIvaCompra.requestFocus();
                return false;
            }
        }
        return false;
    }

    private boolean validarTxtPrecioTotal(JTextField textField){        
        if (validarTxtNumerico(textField)){
            if(validarTxtMayorIgualQueCero(textField) ){
                return true;
            }else{            
                //txtPorcIvaCompra.requestFocus();
                return false;
            }
        }
        return false;
    }

    private boolean validarTxtPrecioNeto(JTextField textField){
        if (validarTxtNumerico(textField)){
            if(validarTxtMayorIgualQueCero(textField)){
                return true;
            }else{            
                //txtVrNetoVenta.requestFocus();
                return false;
            }   
        }
        return false;
    }

    private boolean validarTxtPorcUtilidad(JTextField textField){
        if (validarTxtNumerico(textField)){
            if(validarTxtMayorIgualQueMenosCien(textField)){
                return true;
            }else{ 
                //txtPorcUtilidad.requestFocus();
                return false;
            }
        }
        return false;        
    }
    
    private boolean validarTxtVrUtilidad(JTextField textField){
       if (validarTxtNumerico(textField)){ 
            //if(Double.parseDouble(txtVrUtilidad.getText())<1 || Double.parseDouble(txtVrUtilidad.getText())>=1){
               return true;
            //}else{            
            //    return false;
            //}            
        }      
            //txtVrUtilidad.requestFocus();
            return false;        
    }
    
    private boolean validarTodos(){
        boolean[] bandera= new boolean[8];
        bandera[0]=validarTxtPrecioNeto(txtVrNetoCompra);
        bandera[1]=validarTxtPorcIva(txtPorcIvaCompra);
        bandera[2]=validarTxtPrecioTotal(txtCostoTotalCosto);
        bandera[3]=validarTxtPrecioNeto(txtVrNetoVenta);
        bandera[4]=validarTxtPorcIva(txtPorcIvaVenta);
        bandera[5]=validarTxtPrecioTotal(txtCostoTotalVenta);
        bandera[6]=validarTxtPorcUtilidad(txtPorcUtilidad);
        bandera[7]=validarTxtVrUtilidad(txtVrUtilidad);
        
        for (int i = 0;i<8;i++){
            if (!bandera[i]){
                return false; 
            }
        }
        return true;
    }


    private double calcularValorIva(double precioNeto, double porcIva) {
            try {
                double valorIva = precioNeto *porcIva / 100;
                return valorIva;
            } catch (Exception e) {
                e.printStackTrace();
                return -99999.987654321;
            }            
        }
    
    private double calcularPrecioTotal(double precioNeto, double porcIva) {
            try {
                double precioTotal = precioNeto*(1+ porcIva / 100);
                return precioTotal;
            } catch (Exception e) {
                e.printStackTrace();
                return -99999.987654321; //valor sentinela
            }            
        }

    private double calcularPorcIva(double precioNeto, double precioTotal) {
        try {
            double porcIva = (((precioTotal/precioNeto)-1)*100);                
            return porcIva;
        } catch (Exception e) {
            e.printStackTrace();
            return -99999.987654321; //valor sentinela
        }            
    }
    
    private double calcularPrecioNeto(double porcIva, double precioTotal) {
        try {
            double precio = precioTotal/(1+ porcIva/100);
            return precio;
        } catch (Exception e) {
            e.printStackTrace();
            return -99999.987654321; //valor sentinela
        }            
    }
    
    private double calcularPrecioVentaNetoxPorcUtilidad(double precioNetoCompra, double porcUtilidad) {
        try {
            double precioVentaNeto = precioNetoCompra*((1+ (porcUtilidad/100)));
            return precioVentaNeto;
        } catch (Exception e) {
            e.printStackTrace();
            return -99999.987654321; //valor sentinela
        }            
    }
    
    private double calcularPrecioVentaNetoxValorUtilidad(double precioNetoCompra, double valorUtilidad) {
        try {
            double precioVentaNeto = valorUtilidad + precioNetoCompra;
            return precioVentaNeto;
        } catch (Exception e) {
            e.printStackTrace();
            return -99999.987654321; //valor sentinela
        }            
    }
    
    private double calcularValorUtilidadxPrecioVenta(double precioNetoCompra, double precioNetoVenta) {
        try {
            double valorUtilidad = precioNetoVenta-precioNetoCompra;
            return valorUtilidad;
        } catch (Exception e) {
            e.printStackTrace();
            return -99999.987654321; //valor sentinela
        }            
    }
    
    private double calcularValorUtilidadxPorcUtilidad(double precioNetoCompra, double porcUtilidad) {
        try {
            double valorUtilidad = (precioNetoCompra*(1+ (porcUtilidad/100)))-precioNetoCompra;
            return valorUtilidad;
        } catch (Exception e) {
            e.printStackTrace();
            return -99999.987654321; //valor sentinela
        }            
    }
    
    private double calcularPorcUtilidadxValorUtilidad(double valorUtilidad, double precioNetoCompra) {
        try {
            double porcUtilidad;
            if (precioNetoCompra==0.0){
                return -99999.987654321; //no es posible calcular utilidad
            } else{
                porcUtilidad=100*((valorUtilidad/precioNetoCompra));
                return porcUtilidad;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return -99999.987654321; //valor sentinela
        }            
    }
    
    private double calcularPorcUtilidadxPrecioNetoVenta(double precioNetoVenta, double precioNetoCompra) {
        try {
            double porcUtilidad;
            if (precioNetoCompra==0.0){
                return -99999.987654321; //no es posible calcular utilidad
            } else{
                porcUtilidad=(precioNetoVenta-precioNetoCompra)*100/precioNetoCompra;
                return porcUtilidad;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return -99999.987654321; //valor sentinela
        }            
    }

    private void ListaDepartamentos(){
        departamentos.clear();
        ArrayList<Object> objects = new ArrayList<>();
        ControladorDepartamentos controladorDepartamentos = new ControladorDepartamentos();
        objects = controladorDepartamentos.MostrarTodos("");
        for (Object object : objects) {
            Departamentos departamento = (Departamentos) object;
            departamentos.add(departamento);
            cbDepartamento.addItem(departamento.getDepartamento());
        }
    }

    private void ListaCategorias(){
            categorias.clear();
            ArrayList<Object> objects = new ArrayList<>();
            ControladorCategoria controladorCategoria = new ControladorCategoria();
            objects = controladorCategoria.MostrarTodos("");
            for (Object object : objects) {
                Categorias categoria = (Categorias) object;
                categorias.add(categoria);
                cbCategoria.addItem(categoria.getCategoria());
            }
        }

    public int getIdDepartamento(int indice){
            int indiceDepartamento = indice;
            if (indiceDepartamento == -1) {            
                return 0;
            }
             int idDepartamento =departamentos.get(indiceDepartamento).getId();
             return idDepartamento;
        }

    public int getIdCategoria(int indice){
            int indiceCategoria = indice;
            if (indiceCategoria == -1) {            
                return 0;
            }
             int idCategorias =categorias.get(indiceCategoria).getId();
             return idCategorias;
        }
    

    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lblImagen = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnCargarImagen = new javax.swing.JButton();
        lblRutaImagen = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtReferencia = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbDepartamento = new javax.swing.JComboBox<>();
        cbCategoria = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        txtVrNetoCompra = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtPorcIvaCompra = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        lblCostoIva = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtCostoTotalCosto = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txtVrNetoVenta = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtPorcIvaVenta = new javax.swing.JTextField();
        lblIvaVenta = new javax.swing.JLabel();
        txtCostoTotalVenta = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txtPorcUtilidad = new javax.swing.JTextField();
        txtVrUtilidad = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnLEliminar = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setClosable(true);
        setMaximizable(true);
        setTitle("NUEVO PRODUCTO");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/src/icono2.png"))); // NOI18N

        lblImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/image.png"))); // NOI18N
        lblImagen.setDisabledIcon(null);

        jLabel2.setFont(new java.awt.Font("Arial Narrow", 0, 8)); // NOI18N
        jLabel2.setText("TAMAÑO DE LA IMAGEN IDEAL 256 X 256 PIXELES");

        btnCargarImagen.setText("CARGAR IMAGEN");
        btnCargarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarImagenActionPerformed(evt);
            }
        });

        lblRutaImagen.setText("RUTA DE LA IMAGEN.JPG");

        jLabel4.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel4.setText("DESCRIPCIÓN");

        jLabel5.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel5.setText("REFERENCIA");

        jLabel6.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel6.setText("CÓDIGO");

        jLabel7.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel7.setText("DEPARTAMENTO");

        cbDepartamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDepartamentoActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel8.setText("CATEGORÍA");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información monetaría", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Narrow", 0, 18))); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información del precio de compra", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Narrow", 0, 18))); // NOI18N

        jLabel11.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel11.setText("VR NETO");

        txtVrNetoCompra.setText("0");
        txtVrNetoCompra.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtVrNetoCompraFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtVrNetoCompraFocusLost(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel13.setText("% IVA");

        txtPorcIvaCompra.setText("19");
        txtPorcIvaCompra.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPorcIvaCompraFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPorcIvaCompraFocusLost(evt);
            }
        });
        txtPorcIvaCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPorcIvaCompraActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel14.setText("VR IVA");

        lblCostoIva.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        lblCostoIva.setText("0.0");

        jLabel20.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel20.setText("COSTO TOTAL");

        txtCostoTotalCosto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCostoTotalCostoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCostoTotalCostoFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(100, 100, 100)
                        .addComponent(jLabel13))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtVrNetoCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPorcIvaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblCostoIva, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCostoTotalCosto)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVrNetoCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPorcIvaCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCostoIva)
                    .addComponent(txtCostoTotalCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información del precio de venta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Narrow", 0, 18))); // NOI18N

        jLabel15.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel15.setText("VR NETO");

        txtVrNetoVenta.setText("0");
        txtVrNetoVenta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtVrNetoVentaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtVrNetoVentaFocusLost(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel21.setText("% IVA");

        jLabel22.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel22.setText("VR IVA");

        txtPorcIvaVenta.setText("19");
        txtPorcIvaVenta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPorcIvaVentaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPorcIvaVentaFocusLost(evt);
            }
        });

        lblIvaVenta.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        lblIvaVenta.setText("0.0");

        txtCostoTotalVenta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCostoTotalVentaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCostoTotalVentaFocusLost(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel24.setText("COSTO TOTAL");

        jLabel25.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel25.setText("% UTILIDAD");

        jLabel26.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        jLabel26.setText("VR UTILIDAD");

        txtPorcUtilidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPorcUtilidadFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPorcUtilidadFocusLost(evt);
            }
        });

        txtVrUtilidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtVrUtilidadFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtVrUtilidadFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel15)
                        .addGap(96, 96, 96)
                        .addComponent(jLabel21)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtPorcUtilidad, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtVrUtilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(jLabel26))))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(txtVrNetoVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPorcIvaVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblIvaVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCostoTotalVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVrNetoVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPorcIvaVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIvaVenta)
                    .addComponent(txtCostoTotalVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPorcUtilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtVrUtilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnGuardar.setText("GUARDAR");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnLEliminar.setText("DESHABILITAR");

        btnConsultar.setText("CONSULTAR");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(lblRutaImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCargarImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnConsultar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLEliminar)
                        .addGap(9, 9, 9)
                        .addComponent(btnGuardar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txtReferencia, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addComponent(txtDescripcion)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cbDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(cbCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(8, 8, 8))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtReferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(lblRutaImagen)
                        .addGap(0, 0, 0)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCargarImagen)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLimpiar)
                        .addComponent(btnConsultar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGuardar)
                        .addComponent(btnLEliminar)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        Limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        Productos var = new Productos();
        var.setId(id);
        var.setCodigo(txtCodigo.getText());
        var.setReferencia(txtReferencia.getText());
        var.setDescripcion(txtDescripcion.getText());
        var.setRutaImagen("Pendiente de agregar");
        if (cbDepartamento.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(rootPane, "Seleccione un departamento");
        }else{
            var.setIdDepartamento(getIdDepartamento(cbDepartamento.getSelectedIndex()));
        }
        
        if (cbCategoria.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(rootPane, "Seleccione una categoría");
        }else{
            var.setIdDepartamento(getIdDepartamento(cbCategoria.getSelectedIndex()));
        }
        
        /*       
        try {
            var.setCostoNeto(Double.parseDouble(txtVrNetoCompra.getText()));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El vr del costo neto debe ser numerico.");
            return;
        }
        */
        
        try {
            var.setCostoIva(Double.parseDouble(txtPorcIvaCompra.getText()));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El vr del costo del Iva debe ser numerico.");
            return;
        }
        
        try {
            var.setVentaNeto(Double.parseDouble(txtVrNetoVenta.getText()));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El vr de la venta Neta debe ser numerico.");
            return;
        }
        
        try {
            var.setVentaIva(Double.parseDouble(txtPorcIvaVenta.getText()));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El vr del Iva debe ser numerico.");
            return;
        }
        try {
            var.setVentaUtilidad(Double.parseDouble(txtVrUtilidad.getText()));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El vr de la Utilidad debe ser numerico.");
            return;
        }
        
        ControladorProductos controladorProductos = new ControladorProductos();
        Object[] object = new Object[2];
        
        if (id > 0) {
            object = (Object[]) controladorProductos.Editar(var);
        } else {
            object = (Object[]) controladorProductos.Insertar(var);
        }
        
        if (object[0] == "String") {
            JOptionPane.showMessageDialog(this, object[1]);
            return;
        }
        if (object[0] == "Boolean") {
            if (id > 0) {
                if (((boolean) object[1])) {
                    JOptionPane.showMessageDialog(this, "Actualización Exitoso");
                } else {
                    JOptionPane.showMessageDialog(this, "Actualización Fallido");
                }
                return;
            }
            if (((boolean) object[1])) {
                JOptionPane.showMessageDialog(this, "Registro Exitoso");
            } else {
                JOptionPane.showMessageDialog(this, "Registro Fallido");
            }            
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtPorcIvaCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPorcIvaCompraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPorcIvaCompraActionPerformed

    private void btnCargarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarImagenActionPerformed
        JFileChooser fileChooser = new JFileChooser();; 
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(".jpg & .gif", "jpg", "gif"); 
        fileChooser.setFileFilter(filtro); 
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY); 
        int result = fileChooser.showOpenDialog(this); 
        if (result == JFileChooser.APPROVE_OPTION){ 
            File name= fileChooser.getSelectedFile(); 
            
            if(name!= null){
                try{
                    //Definimos el destino del archivo, que será la carpeta de imagenes
                    String Dest = ("user.dir"+"\\src\\imagenes");
                    Path Destino = Paths.get(Dest);
                    //Definimos el Origen, que será el archivo seleccionado
                    String Orig = name.getPath();
                    Path Origen = Paths.get(Orig);
                    System.out.println("directorio origen: " +Orig);
                    System.out.println("directorio destino: " +Dest);
                    //Copiamos el nuevo archivo con la clase Files, reemplazamos si ya existe uno igual
                    Files.copy(Origen, Destino, REPLACE_EXISTING);
                    //Mostramos mensaje de confirmacion de la copia realizada y la ruta
                    JOptionPane.showMessageDialog(null, "El archivo fue copiado con exito a la carpeta: "+Dest);
                }catch(IOException ex) {
                    ex.printStackTrace();
                    System.err.println("Error al copiar en " + IntProductos.class.getName() + " cargar imagen");
                    //Logger.getLogger(IntProductos.class.getName())log(Level.SEVERE, null, ex);
                }
            }
            
                
            ImageIcon image = new ImageIcon(fileChooser.getSelectedFile().getPath()); 
            if(image.getIconHeight() > 256 || image.getIconWidth() > 256){ 
                ImageIcon imageScalada = new ImageIcon(image.getImage().getScaledInstance(256, 256, 100)); 
                lblImagen.setIcon(imageScalada);                
            } 
            else{ 
                lblImagen.setIcon(image); 
            } 
        }  
    }//GEN-LAST:event_btnCargarImagenActionPerformed

    private void cbDepartamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDepartamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbDepartamentoActionPerformed

    private void txtVrNetoCompraFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVrNetoCompraFocusLost
        if (validarTxtPrecioNeto(txtVrNetoCompra)){
            if(validarTodos()){
                valorNetoCompra=Double.parseDouble(txtVrNetoCompra.getText());
                porcIvaCompra=Double.parseDouble(txtPorcIvaCompra.getText());
                valorNetoVenta = Double.parseDouble(txtVrNetoVenta.getText());
                porcIvaVenta = Double.parseDouble(txtPorcIvaVenta.getText());
                //PrecioTotalCompra
                if(calcularPrecioTotal(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de compra ");
                }else{
                    valorTotalCompra= calcularPrecioTotal(valorNetoCompra, porcIvaCompra);
                    txtCostoTotalCosto.setText(valorTotalCompra.toString());
                }
                //PrecioTotalVenta
                if(calcularPrecioTotal(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de venta");
                }else{
                    valorTotalVenta= calcularPrecioTotal(valorNetoVenta, porcIvaVenta);
                    txtCostoTotalVenta.setText(valorTotalVenta.toString());
                }
                //ValorIvaCompra
                if (calcularValorIva(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la compra");
                }else{
                    valorPorcIvaCompra=calcularValorIva(valorNetoCompra, porcIvaCompra);
                    lblCostoIva.setText(valorPorcIvaCompra.toString());                    
                }
                //ValorIvaVenta
                if (calcularValorIva(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la venta");
                }else{
                    valorPorcIvaVenta=calcularValorIva(valorNetoVenta, porcIvaVenta);
                    lblIvaVenta.setText(valorPorcIvaVenta.toString());                    
                }
                //porcUtilidad
                if (calcularPorcUtilidadxPrecioNetoVenta(valorNetoVenta, valorNetoCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    porcUtilidad= calcularPorcUtilidadxPrecioNetoVenta(valorNetoVenta, valorNetoCompra);
                    txtPorcUtilidad.setText(porcUtilidad.toString());                    
                }
                
                //ValorUtilidad
                if (calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    valorUtilidad= calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta);
                    txtVrUtilidad.setText(valorUtilidad.toString());                    
                }
                //Porcentaje Utilidad
                if (calcularPorcUtilidadxValorUtilidad(valorUtilidad, valorNetoCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el porcentaje de utilidad");
                }else{
                    txtPorcUtilidad.setText(porcUtilidad.toString());                    
                }
            }
        }else{      
            txtVrNetoCompra.setText(valorNetoCompra.toString());            
            txtVrNetoCompra.requestFocus();
            //JOptionPane.showMessageDialog(rootPane, "El valor neto de compra debe ser numérico positivo");
        }
    }//GEN-LAST:event_txtVrNetoCompraFocusLost

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        ConsultarProductos var = new ConsultarProductos();
        jdpEscritorio.add(var);
        var.setVisible(true);         // TODO add your handling code here:
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void txtPorcIvaCompraFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcIvaCompraFocusLost
        if (validarTxtPorcIva(txtPorcIvaCompra)){
            if(validarTodos()){
                valorNetoCompra=Double.parseDouble(txtVrNetoCompra.getText());
                porcIvaCompra=Double.parseDouble(txtPorcIvaCompra.getText());
                valorNetoVenta = Double.parseDouble(txtVrNetoVenta.getText());
                porcIvaVenta = Double.parseDouble(txtPorcIvaVenta.getText());
                //PrecioTotalCompra
                if(calcularPrecioTotal(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de compra ");
                }else{
                    valorTotalCompra= calcularPrecioTotal(valorNetoCompra, porcIvaCompra);
                    txtCostoTotalCosto.setText(valorTotalCompra.toString());
                }
                //PrecioTotalVenta
                if(calcularPrecioTotal(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de venta");
                }else{
                    valorTotalVenta= calcularPrecioTotal(valorNetoVenta, porcIvaVenta);
                    txtCostoTotalVenta.setText(valorTotalVenta.toString());
                }
                //ValorIvaCompra
                if (calcularValorIva(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la compra");
                }else{
                    valorPorcIvaCompra=calcularValorIva(valorNetoCompra, porcIvaCompra);
                    lblCostoIva.setText(valorPorcIvaCompra.toString());                    
                }
                //ValorIvaVenta
                if (calcularValorIva(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la venta");
                }else{
                    valorPorcIvaVenta=calcularValorIva(valorNetoVenta, porcIvaVenta);
                    lblIvaVenta.setText(valorPorcIvaVenta.toString());                    
                }
                //ValorUtilidad
                if (calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    valorUtilidad= calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta);
                    txtVrUtilidad.setText(valorUtilidad.toString());                    
                }
                //Porcentaje Utilidad
                if (calcularPorcUtilidadxValorUtilidad(valorUtilidad, valorNetoCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el porcentaje de utilidad");
                }else{
                    txtPorcUtilidad.setText(porcUtilidad.toString());                    
                }
            }
        }else{      
            txtVrNetoCompra.setText(valorNetoCompra.toString());            
            txtVrNetoCompra.requestFocus();
            //JOptionPane.showMessageDialog(rootPane, "El valor neto de compra debe ser numérico positivo");
        }
    }//GEN-LAST:event_txtPorcIvaCompraFocusLost

    private void txtCostoTotalCostoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCostoTotalCostoFocusLost
        if (validarTxtPrecioTotal(txtCostoTotalCosto)){
            if(validarTodos()){
                valorNetoVenta=Double.parseDouble(txtVrNetoVenta.getText());
                porcIvaCompra=Double.parseDouble(txtPorcIvaCompra.getText());
                valorTotalCompra = Double.parseDouble(txtCostoTotalCosto.getText());
                porcIvaVenta = Double.parseDouble(txtPorcIvaVenta.getText());
                
                //PrecioNetoCompra
                if(calcularPrecioNeto(porcIvaCompra, valorTotalCompra)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio neto de compra ");
                }else{
                    valorNetoCompra= calcularPrecioNeto(porcIvaCompra, valorTotalCompra);
                    txtVrNetoCompra.setText(valorNetoCompra.toString());
                }
                //PrecioTotalVenta
                if(calcularPrecioTotal(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de venta");
                }else{
                    valorTotalVenta= calcularPrecioTotal(valorNetoVenta, porcIvaVenta);
                    txtCostoTotalVenta.setText(valorTotalVenta.toString());
                }
                //ValorIvaCompra
                if (calcularValorIva(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la compra");
                }else{
                    valorPorcIvaCompra=calcularValorIva(valorNetoCompra, porcIvaCompra);
                    lblCostoIva.setText(valorPorcIvaCompra.toString());                    
                }
                //ValorIvaVenta
                if (calcularValorIva(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la venta");
                }else{
                    valorPorcIvaVenta=calcularValorIva(valorNetoVenta, porcIvaVenta);
                    lblIvaVenta.setText(valorPorcIvaVenta.toString());                    
                }
                //ValorUtilidad
                if (calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    valorUtilidad= calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta);
                    txtVrUtilidad.setText(valorUtilidad.toString());                    
                }
                //porcUtilidad
                if (calcularPorcUtilidadxPrecioNetoVenta(valorNetoVenta, valorNetoCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    porcUtilidad= calcularPorcUtilidadxPrecioNetoVenta(valorNetoVenta, valorNetoCompra);
                    txtPorcUtilidad.setText(porcUtilidad.toString());                    
                }
            }
        }else{      
            txtVrNetoCompra.setText(valorNetoCompra.toString());            
            txtVrNetoCompra.requestFocus();
            //JOptionPane.showMessageDialog(rootPane, "El valor neto de compra debe ser numérico positivo");
        }
    }//GEN-LAST:event_txtCostoTotalCostoFocusLost

    private void txtVrNetoVentaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVrNetoVentaFocusLost
        if (validarTxtPrecioNeto(txtVrNetoVenta)){
            if(validarTodos()){
                valorNetoCompra=Double.parseDouble(txtVrNetoCompra.getText());
                porcIvaCompra=Double.parseDouble(txtPorcIvaCompra.getText());
                valorNetoVenta = Double.parseDouble(txtVrNetoVenta.getText());
                porcIvaVenta = Double.parseDouble(txtPorcIvaVenta.getText());
                //PrecioTotalCompra
                if(calcularPrecioTotal(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de compra ");
                }else{
                    valorTotalCompra= calcularPrecioTotal(valorNetoCompra, porcIvaCompra);
                    txtCostoTotalCosto.setText(valorTotalCompra.toString());
                }
                //PrecioTotalVenta
                if(calcularPrecioTotal(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de venta");
                }else{
                    valorTotalVenta= calcularPrecioTotal(valorNetoVenta, porcIvaVenta);
                    txtCostoTotalVenta.setText(valorTotalVenta.toString());
                }
                //ValorIvaCompra
                if (calcularValorIva(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la compra");
                }else{
                    valorPorcIvaCompra=calcularValorIva(valorNetoCompra, porcIvaCompra);
                    lblCostoIva.setText(valorPorcIvaCompra.toString());                    
                }
                //ValorIvaVenta
                if (calcularValorIva(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la venta");
                }else{
                    valorPorcIvaVenta=calcularValorIva(valorNetoVenta, porcIvaVenta);
                    lblIvaVenta.setText(valorPorcIvaVenta.toString());                    
                }
                //ValorUtilidad
                if (calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    valorUtilidad= calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta);
                    txtVrUtilidad.setText(valorUtilidad.toString());                    
                }
                //porcUtilidad
                if (calcularPorcUtilidadxPrecioNetoVenta(valorNetoVenta, valorNetoCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    porcUtilidad= calcularPorcUtilidadxPrecioNetoVenta(valorNetoVenta, valorNetoCompra);
                    txtPorcUtilidad.setText(porcUtilidad.toString());                    
                }
            }
        }else{      
            txtVrNetoCompra.setText(valorNetoCompra.toString());            
            txtVrNetoCompra.requestFocus();
            //JOptionPane.showMessageDialog(rootPane, "El valor neto de compra debe ser numérico positivo");
        }  
    }//GEN-LAST:event_txtVrNetoVentaFocusLost

    private void txtPorcIvaVentaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcIvaVentaFocusLost
        if (validarTxtPorcIva(txtPorcIvaVenta)){
            if(validarTodos()){
                valorNetoCompra=Double.parseDouble(txtVrNetoCompra.getText());
                porcIvaCompra=Double.parseDouble(txtPorcIvaCompra.getText());
                valorNetoVenta = Double.parseDouble(txtVrNetoVenta.getText());
                porcIvaVenta = Double.parseDouble(txtPorcIvaVenta.getText());
                //PrecioTotalCompra
                if(calcularPrecioTotal(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de compra ");
                }else{
                    valorTotalCompra= calcularPrecioTotal(valorNetoCompra, porcIvaCompra);
                    txtCostoTotalCosto.setText(valorTotalCompra.toString());
                }
                //PrecioTotalVenta
                if(calcularPrecioTotal(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de venta");
                }else{
                    valorTotalVenta= calcularPrecioTotal(valorNetoVenta, porcIvaVenta);
                    txtCostoTotalVenta.setText(valorTotalVenta.toString());
                }
                //ValorIvaCompra
                if (calcularValorIva(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la compra");
                }else{
                    valorPorcIvaCompra=calcularValorIva(valorNetoCompra, porcIvaCompra);
                    lblCostoIva.setText(valorPorcIvaCompra.toString());                    
                }
                //ValorIvaVenta
                if (calcularValorIva(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la venta");
                }else{
                    valorPorcIvaVenta=calcularValorIva(valorNetoVenta, porcIvaVenta);
                    lblIvaVenta.setText(valorPorcIvaVenta.toString());                    
                }
                //ValorUtilidad
                if (calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    valorUtilidad= calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta);
                    txtVrUtilidad.setText(valorUtilidad.toString());                    
                }
                //porcUtilidad
                if (calcularPorcUtilidadxPrecioNetoVenta(valorNetoVenta, valorNetoCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    porcUtilidad= calcularPorcUtilidadxPrecioNetoVenta(valorNetoVenta, valorNetoCompra);
                    txtPorcUtilidad.setText(porcUtilidad.toString());                    
                }
            }
        }else{      
            txtVrNetoCompra.setText(valorNetoCompra.toString());            
            txtVrNetoCompra.requestFocus();
            //JOptionPane.showMessageDialog(rootPane, "El valor neto de compra debe ser numérico positivo");
        }
    }//GEN-LAST:event_txtPorcIvaVentaFocusLost

    private void txtCostoTotalVentaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCostoTotalVentaFocusLost
        if (validarTxtPrecioTotal(txtCostoTotalVenta)){
            if(validarTodos()){
                valorNetoCompra=Double.parseDouble(txtVrNetoCompra.getText());
                porcIvaCompra=Double.parseDouble(txtPorcIvaCompra.getText());
                valorTotalVenta = Double.parseDouble(txtCostoTotalVenta.getText());
                porcIvaVenta = Double.parseDouble(txtPorcIvaVenta.getText());
                
                //PrecioTotalCompra
                if(calcularPrecioTotal(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de compra ");
                }else{
                    valorTotalCompra= calcularPrecioTotal(valorNetoCompra, porcIvaCompra);
                    txtCostoTotalCosto.setText(valorTotalCompra.toString());
                }
                //PrecioNetoVenta
                if(calcularPrecioNeto(porcIvaVenta, valorTotalVenta)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio neto de venta");
                }else{
                    valorNetoVenta= calcularPrecioNeto(porcIvaVenta, valorTotalVenta);
                    txtVrNetoVenta.setText(valorNetoVenta.toString());
                }
                //ValorIvaCompra
                if (calcularValorIva(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la compra");
                }else{
                    valorPorcIvaCompra=calcularValorIva(valorNetoCompra, porcIvaCompra);
                    lblCostoIva.setText(valorPorcIvaCompra.toString());                    
                }
                //ValorIvaVenta
                if (calcularValorIva(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la venta");
                }else{
                    valorPorcIvaVenta=calcularValorIva(valorNetoVenta, porcIvaVenta);
                    lblIvaVenta.setText(valorPorcIvaVenta.toString());                    
                }
                //ValorUtilidad
                if (calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    valorUtilidad= calcularValorUtilidadxPrecioVenta(valorNetoCompra, valorNetoVenta);
                    txtVrUtilidad.setText(valorUtilidad.toString());                    
                }
                //porcUtilidad
                if (calcularPorcUtilidadxPrecioNetoVenta(valorNetoVenta, valorNetoCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    porcUtilidad= calcularPorcUtilidadxPrecioNetoVenta(valorNetoVenta, valorNetoCompra);
                    txtPorcUtilidad.setText(porcUtilidad.toString());                    
                }
            }
        }else{      
            txtCostoTotalVenta.setText(valorTotalVenta.toString());            
            txtCostoTotalVenta.requestFocus();
            //JOptionPane.showMessageDialog(rootPane, "El valor neto de compra debe ser numérico positivo");
        }
    }//GEN-LAST:event_txtCostoTotalVentaFocusLost

    private void txtPorcUtilidadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcUtilidadFocusLost
        if (validarTxtPorcUtilidad(txtPorcUtilidad)){
            if(validarTodos()){
                valorNetoCompra=Double.parseDouble(txtVrNetoCompra.getText());
                porcIvaCompra=Double.parseDouble(txtPorcIvaCompra.getText());
                porcUtilidad = Double.parseDouble(txtPorcUtilidad.getText());
                porcIvaVenta = Double.parseDouble(txtPorcIvaVenta.getText());
                //PrecioTotalCompra
                if(calcularPrecioTotal(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de compra ");
                }else{
                    valorTotalCompra= calcularPrecioTotal(valorNetoCompra, porcIvaCompra);
                    txtCostoTotalCosto.setText(valorTotalCompra.toString());
                }
                
                //ValorIvaCompra
                if (calcularValorIva(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la compra");
                }else{
                    valorPorcIvaCompra=calcularValorIva(valorNetoCompra, porcIvaCompra);
                    lblCostoIva.setText(valorPorcIvaCompra.toString());                    
                }       
                //ValorUtilidad
                if (calcularValorUtilidadxPorcUtilidad(valorNetoCompra, porcUtilidad)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor de la utilidad");
                }else{
                    valorUtilidad= calcularValorUtilidadxPorcUtilidad(valorNetoCompra, porcUtilidad);
                    txtVrUtilidad.setText(valorUtilidad.toString());                    
                }
                //PrecioNetoVenta
                if(calcularPrecioVentaNetoxPorcUtilidad(valorNetoCompra, porcUtilidad)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de venta");
                }else{
                    valorNetoVenta= calcularPrecioVentaNetoxPorcUtilidad(valorNetoCompra, porcUtilidad);
                    txtVrNetoVenta.setText(valorNetoVenta.toString());
                }
                //PrecioTotalVenta
                if(calcularPrecioTotal(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                        JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de venta");
                }else{
                    valorTotalVenta= calcularPrecioTotal(valorNetoVenta, porcIvaVenta);
                    txtCostoTotalVenta.setText(valorTotalVenta.toString());
                }
                
                //ValorIvaVenta
                if (calcularValorIva(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                    JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la venta");
                }else{
                    valorPorcIvaVenta=calcularValorIva(valorNetoVenta, porcIvaVenta);
                    lblIvaVenta.setText(valorPorcIvaVenta.toString());                    
                }
                
            }
        }else{      
            txtPorcUtilidad.setText(porcUtilidad.toString());            
            txtPorcUtilidad.requestFocus();
            //JOptionPane.showMessageDialog(rootPane, "El valor neto de compra debe ser numérico positivo");
        }  
    }//GEN-LAST:event_txtPorcUtilidadFocusLost

    private void txtVrUtilidadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVrUtilidadFocusLost
        if (validarTxtVrUtilidad(txtVrUtilidad)){
            if(validarTodos()){
                if ((Double.parseDouble(txtVrUtilidad.getText()) + Double.parseDouble(txtCostoTotalCosto.getText())) < 0) {
                    
                //if(Double.parseDouble(txtVrUtilidad.getText())+Double.parseDouble(txtCostoTotalCosto.getText())<-1*Double.parseDouble(txtCostoTotalCosto.getText())){
                    System.out.println("valor muy negativo");
                    txtVrUtilidad.setText(valorUtilidad.toString());            
                    //txtVrUtilidad.requestFocus();
                    return;
                }else{
                   valorUtilidad = Double.parseDouble(txtVrUtilidad.getText());
                   valorNetoCompra=Double.parseDouble(txtVrNetoCompra.getText());
                   porcIvaCompra=Double.parseDouble(txtPorcIvaCompra.getText());                
                   porcIvaVenta = Double.parseDouble(txtPorcIvaVenta.getText());
                   //PrecioTotalCompra
                   if(calcularPrecioTotal(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                           JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de compra ");
                   }else{
                       valorTotalCompra= calcularPrecioTotal(valorNetoCompra, porcIvaCompra);
                       txtCostoTotalCosto.setText(valorTotalCompra.toString());
                   }

                   //ValorIvaCompra
                   if (calcularValorIva(valorNetoCompra, porcIvaCompra)==-99999.987654321){
                       JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la compra");
                   }else{
                       valorPorcIvaCompra=calcularValorIva(valorNetoCompra, porcIvaCompra);
                       lblCostoIva.setText(valorPorcIvaCompra.toString());                    
                   } 
                   //Porcentaje de Utilidad

                   if (calcularPorcUtilidadxValorUtilidad(valorUtilidad, valorNetoCompra)==-99999.987654321){
                       JOptionPane.showMessageDialog(rootPane, "Error Calculando el porcentaje de la utilidad");
                   }else{
                       porcUtilidad= calcularPorcUtilidadxValorUtilidad(valorUtilidad, valorNetoCompra);
                       txtPorcUtilidad.setText(porcUtilidad.toString());                    
                   }
                   //PrecioNetoVenta
                   if(calcularPrecioVentaNetoxValorUtilidad(valorNetoCompra, valorUtilidad)==-99999.987654321){
                           JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de venta");
                   }else{
                       valorNetoVenta= calcularPrecioVentaNetoxValorUtilidad(valorNetoCompra, valorUtilidad);
                       txtVrNetoVenta.setText(valorNetoVenta.toString());
                   }

                   //PrecioTotalVenta
                   if(calcularPrecioTotal(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                           JOptionPane.showMessageDialog(rootPane, "Error Calculando precio total de venta");
                   }else{
                       valorTotalVenta= calcularPrecioTotal(valorNetoVenta, porcIvaVenta);
                       txtCostoTotalVenta.setText(valorTotalVenta.toString());
                   }

                   //ValorIvaVenta
                   if (calcularValorIva(valorNetoVenta, porcIvaVenta)==-99999.987654321){
                       JOptionPane.showMessageDialog(rootPane, "Error Calculando el valor del Iva de la venta");
                   }else{
                       valorPorcIvaVenta=calcularValorIva(valorNetoVenta, porcIvaVenta);
                       lblIvaVenta.setText(valorPorcIvaVenta.toString());                    
                   }
                }
        }else{      
            txtVrUtilidad.setText(valorUtilidad.toString());            
            txtVrUtilidad.requestFocus();
            //JOptionPane.showMessageDialog(rootPane, "El valor neto de compra debe ser numérico positivo");
        }     
                }
                        
                
    }//GEN-LAST:event_txtVrUtilidadFocusLost

    private void txtVrNetoCompraFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVrNetoCompraFocusGained
        txtVrNetoCompra.selectAll();        // TODO add your handling code here:
    }//GEN-LAST:event_txtVrNetoCompraFocusGained

    private void txtPorcIvaCompraFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcIvaCompraFocusGained
        txtPorcIvaCompra.selectAll();        // TODO add your handling code here:
    }//GEN-LAST:event_txtPorcIvaCompraFocusGained

    private void txtCostoTotalCostoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCostoTotalCostoFocusGained
        txtCostoTotalCosto.selectAll();        // TODO add your handling code here:
    }//GEN-LAST:event_txtCostoTotalCostoFocusGained

    private void txtVrNetoVentaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVrNetoVentaFocusGained
        txtVrNetoVenta.selectAll();        // TODO add your handling code here:
    }//GEN-LAST:event_txtVrNetoVentaFocusGained

    private void txtPorcIvaVentaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcIvaVentaFocusGained
    txtPorcIvaVenta.selectAll();        // TODO add your handling code here:
    }//GEN-LAST:event_txtPorcIvaVentaFocusGained

    private void txtCostoTotalVentaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCostoTotalVentaFocusGained
    txtCostoTotalVenta.selectAll();        // TODO add your handling code here:
    }//GEN-LAST:event_txtCostoTotalVentaFocusGained

    private void txtPorcUtilidadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcUtilidadFocusGained
    txtPorcUtilidad.selectAll();        // TODO add your handling code here:
    }//GEN-LAST:event_txtPorcUtilidadFocusGained

    private void txtVrUtilidadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVrUtilidadFocusGained
        txtVrUtilidad.selectAll();        // TODO add your handling code here:
    }//GEN-LAST:event_txtVrUtilidadFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarImagen;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLEliminar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cbCategoria;
    private javax.swing.JComboBox<String> cbDepartamento;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel lblCostoIva;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblIvaVenta;
    private javax.swing.JLabel lblRutaImagen;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtCostoTotalCosto;
    private javax.swing.JTextField txtCostoTotalVenta;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtPorcIvaCompra;
    private javax.swing.JTextField txtPorcIvaVenta;
    private javax.swing.JTextField txtPorcUtilidad;
    private javax.swing.JTextField txtReferencia;
    private javax.swing.JTextField txtVrNetoCompra;
    private javax.swing.JTextField txtVrNetoVenta;
    private javax.swing.JTextField txtVrUtilidad;
    // End of variables declaration//GEN-END:variables
}
